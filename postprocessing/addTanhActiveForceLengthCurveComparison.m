function figH = addTanhActiveForceLengthCurveComparison(figH,...
                    curveParams, ...
                    activeForceLengthCurve, ...
                    falDomainTest,...
                    plotSettings)

subPlotPanel            = plotSettings.subPlotPanel;
indexPlotRow            = plotSettings.indexPlotRow;
flag_plotBezierCurves   = plotSettings.flag_plotBezierCurves;
flag_plotTanhCurves     = plotSettings.flag_plotTanhCurves;
flag_plotTanCurves      = plotSettings.flag_plotTanCurves;
bezierColor             = plotSettings.bezierColor;
bezierWidth             = plotSettings.bezierWidth;
tanhColor               = plotSettings.tanhColor;
tanhErrorColor          = plotSettings.tanhErrorColor;
tanColor                = plotSettings.tanColor;

flag_fitTanhCurve=0;

% Create and evaluate the passive-force-length curves



idx = 1;
dyPoint = 0.05;

tanhSeriesParams(idx).x0             = curveParams.x(1,1) - diff(curveParams.x(1:2,1)).*0.5;
tanhSeriesParams(idx).x1             = curveParams.x(1,1) + diff(curveParams.x(1:2,1)).*0.5;
tanhSeriesParams(idx).dydx0          = 0;
tanhSeriesParams(idx).dydx1          = diff(curveParams.y(1:2,1))./diff(curveParams.x(1:2,1));
tanhSeriesParams(idx).yNegInf        = 0;
tanhSeriesParams(idx).yInf           = inf;
tanhSeriesParams(idx).xScale         = 1.0;
tanhSeriesParams(idx).xPoint         = curveParams.x(2,1);
tanhSeriesParams(idx).yPoint         = curveParams.y(2,1);
tanhSeriesParams(idx).xAtIntYZero    = 0;

[A,B,C,D,E,F] = calcTanhSegmentCoefficientsUpd( ...
                    tanhSeriesParams(idx).x0,     ...
                    tanhSeriesParams(idx).x1,     ...
                    tanhSeriesParams(idx).dydx0,  ...
                    tanhSeriesParams(idx).dydx1,  ...
                    tanhSeriesParams(idx).yNegInf,...
                    tanhSeriesParams(idx).yInf,   ...
                    tanhSeriesParams(idx).xScale, ...
                    tanhSeriesParams(idx).xPoint, ...
                    tanhSeriesParams(idx).yPoint, ...
                    tanhSeriesParams(idx).xAtIntYZero);

activeForceLengthTanhCoeffs = [A,B,C,D,E,F];  

optParams.names={'dydx1','xScale','yPoint'};
args        = [tanhSeriesParams(idx).dydx1;...
               tanhSeriesParams(idx).xScale;...
               tanhSeriesParams(idx).yPoint];

idx = 2;

tanhSeriesParams(idx).x0             = tanhSeriesParams(idx-1).x1;
tanhSeriesParams(idx).x1             = curveParams.x(2,1) + diff(curveParams.x(2:3,1)).*0.5;
tanhSeriesParams(idx).dydx0          = 0;
tanhSeriesParams(idx).dydx1          = ...
    diff(curveParams.y(2:3,1))./diff(curveParams.x(2:3,1)) ...
    - calcTanhSeriesDerivative(tanhSeriesParams(idx).x1,...
                           activeForceLengthTanhCoeffs,1);
tanhSeriesParams(idx).yNegInf        = 0;
tanhSeriesParams(idx).yInf           =-inf;
tanhSeriesParams(idx).xScale         = 1;
tanhSeriesParams(idx).xPoint         = mean(curveParams.x(2:3,1));
tanhSeriesParams(idx).yPoint         = mean(curveParams.y(2:3,1)) ...
                                       - calcTanhSeriesDerivative(tanhSeriesParams(idx).xPoint,...
                                           activeForceLengthTanhCoeffs,0);
tanhSeriesParams(idx).xAtIntYZero    = 0;

[A,B,C,D,E,F] = calcTanhSegmentCoefficientsUpd( ...
                    tanhSeriesParams(idx).x0,     ...
                    tanhSeriesParams(idx).x1,     ...
                    tanhSeriesParams(idx).dydx0,  ...
                    tanhSeriesParams(idx).dydx1,  ...
                    tanhSeriesParams(idx).yNegInf,...
                    tanhSeriesParams(idx).yInf,   ...
                    tanhSeriesParams(idx).xScale, ...
                    tanhSeriesParams(idx).xPoint, ...
                    tanhSeriesParams(idx).yPoint, ...
                    tanhSeriesParams(idx).xAtIntYZero);

activeForceLengthTanhCoeffs = [activeForceLengthTanhCoeffs;...
                               A,B,C,D,E,F];  

optParams.names={'dydx1','xScale'};
args        = [args;...
               tanhSeriesParams(idx).dydx1;...
               tanhSeriesParams(idx).xScale];

idx = 3;

tanhSeriesParams(idx).x0             = tanhSeriesParams(idx-1).x1;
tanhSeriesParams(idx).x1             = curveParams.x(4,1);
tanhSeriesParams(idx).dydx0          = 0;
tanhSeriesParams(idx).dydx1          = ...
   diff(curveParams.y(4:5,1))./diff(curveParams.x(4:5,1)) ...
   - calcTanhSeriesDerivative(tanhSeriesParams(idx).x1,...
                              activeForceLengthTanhCoeffs,1);
tanhSeriesParams(idx).yNegInf        = 0;
tanhSeriesParams(idx).yInf           =-inf;
tanhSeriesParams(idx).xScale         = 1.0;
tanhSeriesParams(idx).xPoint         = mean(curveParams.x(3:4,1));
tanhSeriesParams(idx).yPoint         = 1.0 ...
                                       - calcTanhSeriesDerivative(tanhSeriesParams(idx).xPoint,...
                                           activeForceLengthTanhCoeffs,0);
tanhSeriesParams(idx).xAtIntYZero    = 0;

[A,B,C,D,E,F] = calcTanhSegmentCoefficientsUpd( ...
                    tanhSeriesParams(idx).x0,     ...
                    tanhSeriesParams(idx).x1,     ...
                    tanhSeriesParams(idx).dydx0,  ...
                    tanhSeriesParams(idx).dydx1,  ...
                    tanhSeriesParams(idx).yNegInf,...
                    tanhSeriesParams(idx).yInf,   ...
                    tanhSeriesParams(idx).xScale, ...
                    tanhSeriesParams(idx).xPoint, ...
                    tanhSeriesParams(idx).yPoint, ...
                    tanhSeriesParams(idx).xAtIntYZero);

activeForceLengthTanhCoeffs = [activeForceLengthTanhCoeffs;...
                               A,B,C,D,E,F];  

optParams.names={'dydx1','xScale'};
args        = [args;...
               tanhSeriesParams(idx).dydx1;...
               tanhSeriesParams(idx).xScale];


idx = 4;

tanhSeriesParams(idx).x0             = curveParams.x(5,1) - diff(curveParams.x(4:5,1)).*0.25;
tanhSeriesParams(idx).x1             = curveParams.x(5,1) + diff(curveParams.x(4:5,1)).*0.25;
tanhSeriesParams(idx).dydx0          = 0;
tanhSeriesParams(idx).dydx1          = ...
   0 - calcTanhSeriesDerivative(tanhSeriesParams(idx).x1,...
                              activeForceLengthTanhCoeffs,1);
tanhSeriesParams(idx).yNegInf        = 0;
tanhSeriesParams(idx).yInf           = inf;
tanhSeriesParams(idx).xScale         = 1.0;
tanhSeriesParams(idx).xPoint         = tanhSeriesParams(idx).x1;
tanhSeriesParams(idx).yPoint         = ...
    sqrt(eps) ...
    - calcTanhSeriesDerivative(tanhSeriesParams(idx).xPoint,...
                               activeForceLengthTanhCoeffs,0);
tanhSeriesParams(idx).xAtIntYZero    = 0;

[A,B,C,D,E,F] = calcTanhSegmentCoefficientsUpd( ...
                    tanhSeriesParams(idx).x0,     ...
                    tanhSeriesParams(idx).x1,     ...
                    tanhSeriesParams(idx).dydx0,  ...
                    tanhSeriesParams(idx).dydx1,  ...
                    tanhSeriesParams(idx).yNegInf,...
                    tanhSeriesParams(idx).yInf,   ...
                    tanhSeriesParams(idx).xScale, ...
                    tanhSeriesParams(idx).xPoint, ...
                    tanhSeriesParams(idx).yPoint, ...
                    tanhSeriesParams(idx).xAtIntYZero);

activeForceLengthTanhCoeffs = [activeForceLengthTanhCoeffs;...
                               A,B,C,D,E,F];  

optParams.names={'dydx1','xScale'};
args        = [args;...
               tanhSeriesParams(idx).dydx1;...
               tanhSeriesParams(idx).xScale];

%
% Optimize
%
argUpd = args;
tanhSeriesCoefficients = activeForceLengthTanhCoeffs;
if(flag_fitTanhCurve==1)
    argsScaling  = args;
    argsScaled  = ones(size(args));
    
    errFcn = @(argInput)calcTanhCurveError(argInput,...
                     optParams,tanhSeriesParams,...
                     activeForceLengthCurve,...
                     falDomainTest,...
                     argsScaling);
    
    errVec0 = errFcn(argsScaled);
    
    [argScaledUpd,resnorm,residual,exitflag,output]=...
        lsqnonlin(errFcn,argsScaled);
    
    argUpd = argScaledUpd.*argsScaling;
    
    errVec1 = errFcn(argScaledUpd);
    
    fprintf('%1.2e\tStarting Error\n%1.2e\tEnding Error\n',...
             sqrt(sum(errVec0.^2)),sqrt(sum(errVec1.^2)));  
    fprintf('%i\tExit flag\n',exitflag);

    localParams=tanhSeriesParams;
    idx=1;
    for i=1:1:length(optParams)
    
        varNames = optParams(i).names;
        for j=1:1:length(varNames)
            localParams(i).(varNames{j})=argUpd(idx,1);
            idx=idx+1;
        end
    
        x0_          =localParams(i).x0;
        x1_          =localParams(i).x1;
        dydx0_       =localParams(i).dydx0;
        dydx1_       =localParams(i).dydx1;
        yNegInf_     =localParams(i).yNegInf;
        yInf_        =localParams(i).yInf;
        xScale_      =localParams(i).xScale;
        xPoint_      =localParams(i).xPoint;
        yPoint_      =localParams(i).yPoint;
        xAtIntYZero_ =localParams(i).xAtIntYZero;
    
        [A,B,C,D,E,F] = calcTanhSegmentCoefficientsUpd(...
                        x0_,x1_,dydx0_,dydx1_,...
                        yNegInf_,yInf_,...
                        xScale_,xPoint_, yPoint_, xAtIntYZero_);
    
        tanhSeriesCoefficients(i,:) = [A,B,C,D,E,F];
    end    
end



assert(length(optParams)==1);

lceN = falDomainTest;
npts = length(falDomainTest);

falBezierSample = zeros(npts,3);
falTanhSample   = zeros(npts,3);
falErrorSample  = zeros(npts,3);

for i=2:1:3
    for j=1:1:npts
        falBezierSample(j,i) = calcBezierYFcnXDerivative(lceN(j,1),...
                                              activeForceLengthCurve,i-2);

        falTanhSample(j,i) = calcTanhSeriesDerivative(lceN(j,1),...
                                       tanhSeriesCoefficients,i-2);

        falErrorSample(j,i) = falTanhSample(j,i)-falBezierSample(j,i);
    end

    figure(figH);
    subplot('Position',reshape(subPlotPanel(indexPlotRow,i,:),1,4));

    if(flag_plotBezierCurves==1)
%         plot( lceN,falBezierSample(:,i),...
%               'Color',bezierColor,'LineWidth',bezierWidth,...
%               'DisplayName','Bezier');
%         hold on;
        fill([lceN(1,1);lceN(end,1);fliplr(lceN')'],...
             [0;0;fliplr(falBezierSample(:,i)')'],...
             bezierColor,...
             'EdgeColor','none',...
             'DisplayName','Bezier');
        hold on;
    end
    if(flag_plotTanhCurves==1)
        plot( lceN,falTanhSample(:,i),...
              'Color',tanhColor,'LineWidth',1,...
              'DisplayName','Tanh');
        hold on;
    end
    if(flag_plotTanhCurves==1 && flag_plotBezierCurves==1)

        text( max(lceN),...
              max(falTanhSample(:,i)),...
              sprintf('%1.2e: RMSE\n', sqrt(sum(falErrorSample(:,i).^2))),...
              'FontSize',6,...
              'HorizontalAlignment','right',...
              'VerticalAlignment','top',...
              'Color',tanhColor);
        hold on;
        plot( lceN,falErrorSample(:,i),...
              '-','Color',tanhErrorColor,'LineWidth',1,...
              'DisplayName','Tanh Error');
        hold on;
    end

%     if(flag_plotTanCurves==1)
%         plot( lceN,falTanSample(:,i),...
%               'Color',tanColor,'LineWidth',1,...
%               'DisplayName','Tan');
%         hold on;
%     end
    box off;

    switch(i)
        case 1
            title('Force-Length Curve Integral');
            xlabel('Norm. Length ($\ell/\ell^M_o$)');
            ylabel('Norm. Energy ($\tilde{f}^M \, \tilde{\ell}^M$)');
            legend('Location','NorthWest');            
            legend boxoff;
        case 2

            for j=1:1:length(tanhSeriesParams)
                x0 = tanhSeriesParams(j).x0;
                x1 = tanhSeriesParams(j).x1;
                y0 = calcTanhSeriesDerivative(x0,...
                                       tanhSeriesCoefficients,i-2);
                y1 = calcTanhSeriesDerivative(x1,...
                                       tanhSeriesCoefficients,i-2);                
                plot([x0;x1],[y0;y1],'o','MarkerSize',5,...
                    'Color',tanhColor,'MarkerFaceColor',[1,1,1]);
                hold on;
            end
            title('Force-Length  Curve Value');            
            xlabel('Norm. Length ($\ell/\ell^M_o$)')
            ylabel('Norm. Force ($f/f^M_o$)');            

            
        case 3
            for j=1:1:length(tanhSeriesParams)
                x0 = tanhSeriesParams(j).x0;
                x1 = tanhSeriesParams(j).x1;
                dydx0 = calcTanhSeriesDerivative(x0,...
                                       tanhSeriesCoefficients,1);
                dydx1 = calcTanhSeriesDerivative(x1,...
                                       tanhSeriesCoefficients,1);             
                plot([x0;x1],[dydx0;dydx1],'o','MarkerSize',5,...
                    'Color',tanhColor,'MarkerFaceColor',[1,1,1]);
                hold on;
            end

            title('Derivative');                        
            xlabel('Norm. Length ($\ell/\ell^M_o$)')
            ylabel('Norm. Stiffness ($\delta \tilde{f^M} / \delta \tilde{\ell^M}$)');
            hold on;
            
        otherwise
            assert(0,'Error: missing postprocessing code for the current derivative');
    end

end
