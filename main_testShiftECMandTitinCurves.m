clc;
close all;
clear all;


set(groot, 'defaultAxesFontSize',8);
set(groot, 'defaultTextFontSize',8);
set(groot, 'defaultAxesLabelFontSizeMultiplier',1.2);
set(groot, 'defaultAxesTitleFontSizeMultiplier',1.2);
set(groot, 'defaultAxesTickLabelInterpreter','latex');
set(groot, 'defaultLegendInterpreter','latex');
set(groot, 'defaultAxesTitleFontWeight','bold');  
set(groot, 'defaultTextInterpreter','latex');
set(groot, 'defaultFigurePaperUnits','centimeters');
set(groot, 'defaultFigurePaperType','A4');

pubOutputFolder                         = 'output/plots/MuscleCurves/';
postprocessingDirectoryTree             = genpath('postprocessing');
addpath(postprocessingDirectoryTree   );
addpath('colornames/');
[names,rgb] = colornames('SVG','FireBrick');

parametersDirectoryTreeMTParams     = genpath('parameters');
parametersDirectoryTreeExperiments  = genpath('experiments');
parametersDirectoryTreeModels       = genpath('models');
parametersDirectoryTreeCurves       = genpath('curves');

addpath(parametersDirectoryTreeMTParams);
addpath(parametersDirectoryTreeExperiments);
addpath(parametersDirectoryTreeModels);
addpath(parametersDirectoryTreeCurves);



load('output/structs/defaultFelineSoleusQuadraticCurves.mat');
load('output/structs/defaultFelineSoleus.mat');
npts  = 100;
domain= [] ; %Take the default extended range


fpeValues = calcQuadraticBezierYFcnXCurveSampleVector(...
  felineSoleusNormMuscleQuadraticCurves.fiberForceLengthCurve,...
  npts, domain);

% Sample the fpe curve created by the ECM and series connection of titin
samples = fpeValues.x;

[ curveSampleECMHalfFeline,...
  curveSampleTitinFeline,...
  curveSampleTitinActiveFeline,...
  curveSampleIgpFeline,...
  curveSamplePevkFeline,...
  curveSampleIgdFeline,...
  curveSampleProximalTitinFeline,...
  curveSampleDistalTitinFeline] = ...
  sampleQuadraticTitinCurves(samples.*0.5,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthECMHalfCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthProximalTitinCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthProximalTitinInverseCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthDistalTitinCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthDistalTitinInverseCurve,...                    
                    felineSoleusNormMuscleQuadraticCurves.forceLengthIgPTitinCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthIgPTitinInverseCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthPevkTitinCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthPevkTitinInverseCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthIgDTitinCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthIgDTitinInverseCurve,...
                    defaultFelineSoleus.sarcomere.ZLineToT12NormLengthAtOptimalFiberLength,...
                    defaultFelineSoleus.sarcomere.IGPNormLengthAtOptimalFiberLength,...
                    defaultFelineSoleus.sarcomere.PEVKNormLengthAtOptimalFiberLength,...
                    defaultFelineSoleus.sarcomere.IGDFixedNormLengthAtOptimalFiberLength,...
                    defaultFelineSoleus.sarcomere.titinModelType); 

fpe31Values.x = samples;
fpe31Values.y = curveSampleECMHalfFeline.y.*(defaultFelineSoleus.sarcomere.extraCellularMatrixPassiveForceFraction) ...
               +curveSampleTitinFeline.y.*(1-defaultFelineSoleus.sarcomere.extraCellularMatrixPassiveForceFraction);


%%
% Construct and sample the shifted curves
%%
lceNShift = -0.1;
lceHNShift = lceNShift/2;

%%
%Fpe
%%
fiberForceLengthCurveShifted=...
    felineSoleusNormMuscleQuadraticCurves.fiberForceLengthCurve;

fiberForceLengthCurveShifted.xpts=fiberForceLengthCurveShifted.xpts+lceNShift;
fiberForceLengthCurveShifted.xEnd=fiberForceLengthCurveShifted.xEnd+lceNShift;

fpeShiftValues = calcQuadraticBezierYFcnXCurveSampleVector(...
                              fiberForceLengthCurveShifted,...
                              npts, domain);
%%
%ECM
%%
forceLengthECMHalfCurveShifted= felineSoleusNormMuscleQuadraticCurves.forceLengthECMHalfCurve;
forceLengthECMHalfCurveShifted.xpts=forceLengthECMHalfCurveShifted.xpts+lceHNShift;
forceLengthECMHalfCurveShifted.xEnd=forceLengthECMHalfCurveShifted.xEnd+lceHNShift;
forceLengthECMHalfCurveShiftedInverse = createInverseCurve(forceLengthECMHalfCurveShifted);

fecmShiftValues = calcQuadraticBezierYFcnXCurveSampleVector(...
                              forceLengthECMHalfCurveShifted,...
                              npts, domain);
%%
%Titin
%%
forceLengthProximalTitinCurveShifted = ...
    felineSoleusNormMuscleQuadraticCurves.forceLengthProximalTitinCurve;
kprox = forceLengthProximalTitinCurveShifted.dydxEnd(1,2);

forceLengthDistalTitinCurveShifted   = ...
    felineSoleusNormMuscleQuadraticCurves.forceLengthDistalTitinCurve;
kdist = forceLengthDistalTitinCurveShifted.dydxEnd(1,2);

lceNProxShift = (kdist/(kprox+kdist))*lceHNShift;
lceNDistShift = (kprox/(kprox+kdist))*lceHNShift;
assert(abs(lceNProxShift+lceNDistShift-lceHNShift)<1e-6);

forceLengthProximalTitinCurveShifted.xpts=forceLengthProximalTitinCurveShifted.xpts+lceNProxShift;
forceLengthProximalTitinCurveShifted.xEnd=forceLengthProximalTitinCurveShifted.xEnd+lceNProxShift;

forceLengthDistalTitinCurveShifted.xpts=forceLengthDistalTitinCurveShifted.xpts+lceNDistShift;
forceLengthDistalTitinCurveShifted.xEnd=forceLengthDistalTitinCurveShifted.xEnd+lceNDistShift;


fProxShiftValues=calcQuadraticBezierYFcnXCurveSampleVector(...
                              forceLengthProximalTitinCurveShifted,...
                              npts, domain);

fDistShiftValues=calcQuadraticBezierYFcnXCurveSampleVector(...
                              forceLengthDistalTitinCurveShifted,...
                              npts, domain);

forceLengthProximalTitinCurveShiftedInverse = createInverseCurve(forceLengthProximalTitinCurveShifted);
forceLengthDistalTitinCurveShiftedInverse = createInverseCurve(forceLengthDistalTitinCurveShifted);

%%
% Sample the total passive force
%%
samplesShifted=fpeShiftValues.x;

[ curveSampleECMHalfFelineShifted,...
  curveSampleTitinFelineShifted,...
  curveSampleTitinActiveFelineShifted,...
  curveSampleIgpFeline,...
  curveSamplePevkFeline,...
  curveSampleIgdFeline,...
  curveSampleProximalTitinFelineShifted,...
  curveSampleDistalTitinFelineShifted] = ...
  sampleQuadraticTitinCurves(samplesShifted.*0.5,...
                    forceLengthECMHalfCurveShifted,...
                    forceLengthProximalTitinCurveShifted,...
                    forceLengthProximalTitinCurveShiftedInverse,...
                    forceLengthDistalTitinCurveShifted,...
                    forceLengthDistalTitinCurveShiftedInverse,...                    
                    felineSoleusNormMuscleQuadraticCurves.forceLengthIgPTitinCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthIgPTitinInverseCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthPevkTitinCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthPevkTitinInverseCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthIgDTitinCurve,...
                    felineSoleusNormMuscleQuadraticCurves.forceLengthIgDTitinInverseCurve,...
                    defaultFelineSoleus.sarcomere.ZLineToT12NormLengthAtOptimalFiberLength,...
                    defaultFelineSoleus.sarcomere.IGPNormLengthAtOptimalFiberLength,...
                    defaultFelineSoleus.sarcomere.PEVKNormLengthAtOptimalFiberLength,...
                    defaultFelineSoleus.sarcomere.IGDFixedNormLengthAtOptimalFiberLength,...
                    defaultFelineSoleus.sarcomere.titinModelType); 

fpe31ValuesShifted.x = samplesShifted;

%Note: the proximal and distal segments are in series, and so, they
%      both generate the same force as the entire titin filament. Yes,
%      the above function solves for the length of these two segments such
%      that they generate the same force have a half sarcomere length
%       that matches samplesShifted*0.5

fpe31ValuesShifted.y = ...
    curveSampleECMHalfFelineShifted.y.*(defaultFelineSoleus.sarcomere.extraCellularMatrixPassiveForceFraction) ...
   +curveSampleProximalTitinFelineShifted.y.*(1-defaultFelineSoleus.sarcomere.extraCellularMatrixPassiveForceFraction);


%%
%Plot everything
%%
figCurve = figure;

subplot(2,2,1);
    plot(fpeValues.x,fpeValues.y,'--',...
        'Color',[1,1,1].*0.5,'LineWidth',2,...
        'DisplayName','fpe');
    hold on;
    plot(fpe31Values.x,fpe31Values.y,'-',...
        'Color',[1,0.5,0.5],...
        'DisplayName','fecm+(-f1-f2-)');
    hold on;    
    plot(fpeShiftValues.x,fpeShiftValues.y,'-',...
        'Color',[0.5,0.5,1],...
        'DisplayName','fpe-shift');
    hold on;  
    plot(fpe31ValuesShifted.x,fpe31ValuesShifted.y,'-',...
        'Color',[0,0,0],...
        'DisplayName','fecm+(-f1-f2-)');
    hold on;     

    lceNShiftNum = fpeShiftValues.x(end)-fpeValues.x(end);
    text(fpeShiftValues.x(end),fpeShiftValues.y(end),...
         sprintf('dl=%1.3f\ndl*=%1.3f',lceNShift,lceNShiftNum),...
         'VerticalAlignment','top');
    hold on




    legend('Location','NorthWest');
    xlabel('$$\tilde{\ell}^{M}$$');
    ylabel('$$\tilde{f}^{PE}$$');
    title('Force-Length Relation')
    box off;

subplot(2,2,2);
    plot(curveSampleECMHalfFeline.x,...
         curveSampleECMHalfFeline.y,'-',...
         'Color',[1,0.5,0.5],...
         'DisplayName','ECM');
    hold on;

%     plot(fecmShiftValues.x,...
%          fecmShiftValues.y,'-',...
%         'Color',[0.5,0.5,1],...
%         'DisplayName','fecm-shift');
%     hold on;  

    plot(curveSampleECMHalfFelineShifted.x,...
         curveSampleECMHalfFelineShifted.y,'-',...
         'Color',[0,0,0],...
         'DisplayName','ECM');
    hold on;

    lceHNShiftNum = curveSampleECMHalfFelineShifted.x(end)...
                   -curveSampleECMHalfFeline.x(end);
    text(curveSampleECMHalfFelineShifted.x(end),...
         curveSampleECMHalfFelineShifted.y(end),...
         sprintf('dl=%1.3f\ndl*=%1.3f',lceHNShift,lceHNShiftNum),...
         'VerticalAlignment','top');
    hold on    

    legend('Location','NorthWest');    
    xlabel('$$\tilde{\ell}^{M}$$');
    ylabel('$$\tilde{f}^{ECM}$$');
    title('ECM Force-Length (half)');
    box off;
subplot(2,2,3);
    plot(curveSampleProximalTitinFeline.x,...
         curveSampleProximalTitinFeline.y,...
         '-','Color',[1,0.5,0.5],...
         'DisplayName','Prox.Titin');
    hold on; 
    plot(curveSampleProximalTitinFelineShifted.x,...
         curveSampleProximalTitinFelineShifted.y,...
         '-','Color',[0,0,0],...
         'DisplayName','Prox.Titin Shifted');
    hold on; 

%     plot(fProxShiftValues.x,...
%          fProxShiftValues.y,...
%          '-','Color',[1,0.5,0.5],...
%          'DisplayName','Prox.Titin-Shifted');
%     hold on; 

    lceHNShiftNum = curveSampleProximalTitinFelineShifted.x(end)...
                   -curveSampleProximalTitinFeline.x(end);
    text(curveSampleProximalTitinFelineShifted.x(end),...
         curveSampleProximalTitinFelineShifted.y(end),...
         sprintf('dl=%1.3f\ndl*=%1.3f',lceNProxShift,lceHNShiftNum),...
         'VerticalAlignment','top');
    hold on  

    legend('Location','NorthWest');    
    xlabel('$$\tilde{\ell}^{M}$$');
    ylabel('$$\tilde{f}^{1}$$');
    title('Prox. Titin Force-Length (half)');    
    box off;

subplot(2,2,4);
    plot(curveSampleDistalTitinFeline.x,...
         curveSampleDistalTitinFeline.y,...
         '-','Color',[1,0.5,0.5],...
         'DisplayName','Dist.Titin');
    hold on;  

    plot(curveSampleDistalTitinFelineShifted.x,...
         curveSampleDistalTitinFelineShifted.y,...
         '-','Color',[0,0,0],...
         'DisplayName','Dist.Titin-Shifted');
    hold on;  
    
%     plot(fDistShiftValues.x,...
%          fDistShiftValues.y,...
%          '-','Color',[1,0.5,0.5],...
%          'DisplayName','Dist.Titin-Shifted');
%     hold on; 

    lceHNShiftNum =  curveSampleDistalTitinFelineShifted.x(end)...
                    -curveSampleDistalTitinFeline.x(end);
    text(   curveSampleDistalTitinFelineShifted.x(end),...
            curveSampleDistalTitinFelineShifted.y(end),...
         sprintf('dl=%1.3f\ndl*=%1.3f',lceNDistShift,lceHNShiftNum),...
         'VerticalAlignment','top');
    hold on 

    legend('Location','NorthWest');    
    xlabel('$$\tilde{\ell}^{M}$$');
    ylabel('$$\tilde{f}^{2}$$');
    title('Dist. Titin Force-Length (half)');        
    box off;